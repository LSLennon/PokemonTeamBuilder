@inject PokedexServices PokeService
@inject PokemonAuthenticationService AuthService
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using System.ComponentModel;

@page "/ConstructPokemon/{OnePokemon}"
@if (IsLoaded)
{
    <PaperWrapper>
        <MudItem xs="3">
            <MudImage Src="@pokemon.Image"
                      Alt="@pokemon.PokemonName"
                      Fluid="true"
                      Class="pokemon-image" />
        </MudItem>
        <MudItem xs="2">

            <MudItem>
                @if (!string.IsNullOrEmpty(CustomPoke?.CustomPokemonNickname))
                {
                    <MudText>
                        Nickname: @CustomPoke.CustomPokemonNickname
                    </MudText>
                }
                else
                {
                    <MudText>
                        Name: @pokemon.PokemonName
                    </MudText>
                }

            </MudItem>
            <MudItem>
                <MudText>Level: @CustomPoke.CustomPokemonLevel</MudText>
            </MudItem>
            <MudItem>
                <MudText>
                    Ability:
                    @if (!string.IsNullOrEmpty(CustomPoke.CustomPokemonAbility?.AbilityName))
                    {
                        @CustomPoke.CustomPokemonAbility.AbilityName
                    }
                </MudText>
            </MudItem>
            <MudItem>
                <MudText>
                    Nature:
                    @if (!string.IsNullOrEmpty(CustomPoke.CustomPokemonNature?.NatureName))
                    {
                        @CustomPoke.CustomPokemonNature.NatureName
                    }
                </MudText>
            </MudItem>
            <MudItem>
                <MudText>
                    Held Item:
                    @if (!string.IsNullOrEmpty(CustomPoke.CustomPokemonHeldItem?.HeldItemName))
                    {
                        @CustomPoke.CustomPokemonHeldItem.HeldItemName
                    }
                </MudText>
            </MudItem>
        </MudItem>
        <MudItem xs="3" Class="">
            @foreach (var move in CustomMoves)
            {
                <MoveTemplate Move="move" />
            }
        </MudItem>
        <MudItem xs="3">
            <MudCard>
                <MudCardContent>
                    <MudChart ChartType="ChartType.StackedBar" ChartSeries="@StatTotal" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </PaperWrapper>
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Class="ml-auto"
               OnClick="AddCustomPokemon">
        Add Custom Pokemon
    </MudButton>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Basic Info">
            <PaperWrapper>
                <MudItem xs="12" sm="3">
                    <MudItem xs="12">
                        <PaperWrapper>
                            <MudTextField T="string"
                                          Label="Nickname"
                                          @bind-Value="CustomPoke.CustomPokemonNickname" />
                        </PaperWrapper>
                    </MudItem>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <PaperWrapper>
                        <MudText Typo="Typo.h6">Abilities</MudText>
                        <MudToggleGroup SelectionMode="SelectionMode.SingleSelection"
                                        @bind-Value="CustomPoke.CustomPokemonAbility"
                                        Color="Color.Tertiary"
                                        CheckMark>
                            @foreach (var ability in pokemon.Abilities)
                            {
                                <MudTooltip Text="@ability.PokeAbility.AbilityDescription">
                                    <MudToggleItem Value="ability.PokeAbility" Text="@ability.PokeAbility.AbilityName" />
                                </MudTooltip>
                            }
                        </MudToggleGroup>
                    </PaperWrapper>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <PaperWrapper>
                        <MudNumericField Label="Level"
                                         @bind-Value="CustomPoke.CustomPokemonLevel"
                                         Min="1"
                                         Max="100">
                        </MudNumericField>
                    </PaperWrapper>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <PaperWrapper>
                        <MudSelect @bind-Value="CustomPoke.UserBox" Label="Select box" OpenIcon="@Icons.Material.Filled.AddBox" AdornmentColor="Color.Secondary" Required>
                            @foreach (var item in UserBoxes)
                            {
                                <MudSelectItem Value="@item">@item.UserBoxName</MudSelectItem>
                            }
                        </MudSelect>
                    </PaperWrapper>
                </MudItem>
            </PaperWrapper>
        </MudTabPanel>
        <MudTabPanel Text="Held Item">
            <HeldItemTable HeldItemList="@Items" OnHeldItemAdded="OnHeldItemAdded"></HeldItemTable>
        </MudTabPanel>
        <MudTabPanel Text="Nature">
            <NatureTable NatureList="@Natures" OnNatureAdded="OnNatureAdded"></NatureTable>
        </MudTabPanel>
        <MudTabPanel Text="Moves">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                @foreach (var MoveList in AllMoveLists)
                {
                    <MudTabPanel Text="@MoveList.Key">
                        <MoveTable IsCustom="true" MoveList="@MoveList.Value" TableType="@MoveList.Key" OnMoveAdded="OnMoveAdded" IsLoaded="@IsLoaded"></MoveTable>
                    </MudTabPanel>
                }
            </MudTabs>
        </MudTabPanel>
        <MudTabPanel Text="EVs, IVs">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="EVs">

                    <MudSlider @bind-Value="EVStats.HP" Min="0" Max="252" TickMarks="true" Step="4">
                        HP EVs: @EVStats.HP.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="EVStats.Attack" Min="0" Max="252" TickMarks="true" Step="4">
                        Attack EVs: @EVStats.Attack.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="EVStats.Defence" Min="0" Max="252" TickMarks="true" Step="4">
                        Defence EVs: @EVStats.Defence.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="EVStats.SpAttack" Min="0" Max="252" TickMarks="true" Step="4">
                        SpAttack EVs: @EVStats.SpAttack.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="EVStats.SpDefence" Min="0" Max="252" TickMarks="true" Step="4">
                        SpDefence EVs: @EVStats.SpDefence.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="EVStats.Speed" Min="0" Max="252" TickMarks="true" Step="4">
                        Speed EVs: @EVStats.Speed.ToString()
                    </MudSlider>

                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Total: @EVStats.StatTotal() / 508</MudText>

                </MudTabPanel>
                <MudTabPanel Text="IVs">

                    <MudSlider @bind-Value="IVStats.HP" Min="0" Max="31" TickMarks="true" Step="1">
                        HP IVs: @IVStats.HP.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="IVStats.Attack" Min="0" Max="31" TickMarks="true" Step="1">
                        Attack IVs: @IVStats.Attack.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="IVStats.Defence" Min="0" Max="31" TickMarks="true" Step="1">
                        Defence IVs: @IVStats.Defence.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="IVStats.SpAttack" Min="0" Max="31" TickMarks="true" Step="1">
                        SpAttack IVs: @IVStats.SpAttack.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="IVStats.SpDefence" Min="0" Max="31" TickMarks="true" Step="1">
                        SpDefence IVs: @IVStats.SpDefence.ToString()
                    </MudSlider>

                    <MudSlider @bind-Value="IVStats.Speed" Min="0" Max="31" TickMarks="true" Step="1">
                        Speed IVs: @IVStats.Speed.ToString()
                    </MudSlider>

                </MudTabPanel>
            </MudTabs>
        </MudTabPanel>
    </MudTabs>
}
@code {
    //Passed in pokmeon to load indivdual data
    [Parameter]
    public string OnePokemon { get; set; }

    //classes for display
    Pokemon pokemon = new Pokemon();

    //Loading and User Data
    private bool IsLoaded = false;
    private bool isLoggedIn;
    private string username;

    //Nature
    List<PokeNature> Natures = new List<PokeNature>();

    //Held Item
    List<HeldItem> Items = new List<HeldItem>();

    //Stat Display
    public List<ChartSeries> StatTotal = new List<ChartSeries>();
    public DecoratorCustomStats EVStats;
    public DecoratorCustomStats IVStats;
    public DecoratorCustomPokemonNotify CustomPoke;

    //Sets the descriptions for the chart
    public string[] XAxisLabels = { "HP", "Atk", "Def", "SpAtk", "SpDef", "Spe" };
    private int Index = -1;

    //Moves
    List<MPokemonToMoves> CustomMoves = new List<MPokemonToMoves>();

    // Adds all moves so it is easier to generate them all above using foreach loops
    Dictionary<string, List<MPokemonToMoves>> AllMoveLists = new Dictionary<string, List<MPokemonToMoves>>
    {
        {"Level-Up Moves", new List<MPokemonToMoves>()},
        {"Machine Moves", new List<MPokemonToMoves>()},
        {"Egg Moves", new List<MPokemonToMoves>()}
    };

    // Adds or removes pokemon for Custom Moves and notifies the user
    private void OnMoveAdded(MPokemonToMoves move)
    {
        if (CustomMoves.Contains(move))
        {
            CustomMoves.Remove(move);
            Snackbar.Add($"{move.PokeMove.MoveName} has been removed.");
        }
        else if (CustomMoves.Count() >= 4)
        {
            Snackbar.Add("Only 4 moves allowed.");
        }
        else
        {
            CustomMoves.Add(move);
            Snackbar.Add($"{move.PokeMove.MoveName} has been added.");
        }
        StateHasChanged();
    }

    private void OnHeldItemAdded(HeldItem item)
    {
        CustomPoke.CustomPokemonHeldItem = item;
        Snackbar.Add($"{item.HeldItemName} has been set.");
    }

    private void OnNatureAdded(PokeNature nature)
    {
        CustomPoke.CustomPokemonNature = nature;
        Snackbar.Add($"{nature.NatureName} has been set.");
    }

    protected override async Task OnInitializedAsync()
    {
        pokemon = await PokeService.GetPokemonByName(OnePokemon);

        if (pokemon != null)
        {
            LoadMoves();
            await LoadCustomPokemon();
            await LoggedIn();
            IsLoaded = true;
            StateHasChanged();
        }
    }

    // Makes sure custom pokemon and all other requiered information is loaded
    public async Task LoadCustomPokemon()
    {
        CustomPoke = new DecoratorCustomPokemonNotify(new CustomPokemon());
        Natures = await PokeService.GetNatureList();
        Items = await PokeService.GetHeldItemList();

        CustomPoke.CustomPokemonNature = Natures.First();
        if (CustomPoke.CustomPokemonLevel <= 0)
        {
            CustomPoke.CustomPokemonLevel = 50;
        }
        CustomPoke.OnAtributeChanged += RefreshChart;

        CustomPoke.CustomPokemonEVs = new PokeStats();
        EVStats = new DecoratorCustomStats(CustomPoke.CustomPokemonEVs, StatType.EV);
        EVStats.OnStatChanged += RefreshChart;

        CustomPoke.CustomPokemonIVs = new PokeStats();
        IVStats = new DecoratorCustomStats(CustomPoke.CustomPokemonIVs, StatType.IV);
        IVStats.OnStatChanged += RefreshChart;

        RefreshChart();
    }

    //refreshed teh chart display whenever a relevent value is changed
    private void RefreshChart()
    {
        StatTotal.Clear();

        DecoratorCalculateStats calculateStats = new DecoratorCalculateStats(pokemon.BaseStats, EVStats, IVStats, CustomPoke.CustomPokemonLevel, CustomPoke.CustomPokemonNature);

        ChartSeries series = new ChartSeries
            {
                Name = "Stat Totals",
                Data = calculateStats.StatsArray().Select(x => Convert.ToDouble(x)).ToArray()
            };
        StatTotal.Add(series);

    }

    // gets and sorts all teh base pokemons moves
    public void LoadMoves()
    {
        foreach (var move in pokemon.Moves)
        {
            if (move.PokeMethod.Name == "level-up")
            {
                AllMoveLists["Level-Up Moves"].Add(move);
            }
            else if (move.PokeMethod.Name == "machine")
            {
                AllMoveLists["Machine Moves"].Add(move);
            }
            else if (move.PokeMethod.Name == "egg")
            {
                AllMoveLists["Egg Moves"].Add(move);
            }
        }
    }

    public List<UserBox> UserBoxes = new List<UserBox>();

    public async Task LoggedIn()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        isLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;
        if (isLoggedIn)
        {
            username = authState.User.Identity.Name;
        }
    }

    //saves a custom pokemon to teh database and impliments default values for fields that are requiered. for those that arent they are left blank
    private async Task AddCustomPokemon()
    {
        CustomPokemon AddPoke = new CustomPokemon();
        AddPoke.PokemonId = pokemon.PokemonId;
        AddPoke.CustomPokemonLevel = CustomPoke.CustomPokemonLevel;
        AddPoke.CustomPokemonNature = CustomPoke.CustomPokemonNature;

        List<MCustomToMoves> MoveList = new List<MCustomToMoves>();
        foreach (var move in CustomMoves)
        {
            MCustomToMoves mCustom = new MCustomToMoves
                {
                    MPokemonToMoves = move,
                };
            MoveList.Add(mCustom);
        }
        AddPoke.CustomPokemonMoves = MoveList;
        PokeStats IVs = new PokeStats
            {
                HP = IVStats.HP,
                Attack = IVStats.Attack,
                Defence = IVStats.Defence,
                SpAttack = IVStats.SpAttack,
                SpDefence = IVStats.SpDefence,
                Speed = IVStats.Speed,
            };
        AddPoke.CustomPokemonIVs = IVs;
        PokeStats EVs = new PokeStats
            {
                HP = EVStats.HP,
                Attack = EVStats.Attack,
                Defence = EVStats.Defence,
                SpAttack = EVStats.SpAttack,
                SpDefence = EVStats.SpDefence,
                Speed = EVStats.Speed,
            };
        AddPoke.CustomPokemonEVs = EVs;

        if (CustomPoke.CustomPokemonHeldItem != null)
        {
            AddPoke.CustomPokemonHeldItem = CustomPoke.CustomPokemonHeldItem;
        }
        if (CustomPoke.CustomPokemonNickname != null)
        {
            AddPoke.CustomPokemonNickname = CustomPoke.CustomPokemonNickname;
        }

        if (CustomPoke.CustomPokemonAbility == null)
        {
            AddPoke.CustomPokemonAbility = pokemon.Abilities.First().PokeAbility;
        }
        else
        {
            AddPoke.CustomPokemonAbility = CustomPoke.CustomPokemonAbility;
        }
        if (CustomPoke.UserBox == null)
        {
            AddPoke.UserBox = UserBoxes.First();
        }
        else
        {
            AddPoke.UserBox = CustomPoke.UserBox;
        }

        await UserService.AddCustomPokemonToBox(AddPoke);
        NavigationManager.NavigateTo($"/UserProfile");

    }
}
