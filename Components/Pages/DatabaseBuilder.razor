@page "/DatabaseBuilder"
@inject PokemonApiService PokeApi
@inject PokemonServices PokeServices

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           Class="ml-auto"
           OnClick="AddTypes">
    Add Types
</MudButton>

<MudSpacer />

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           Class="ml-auto"
           OnClick="AddTypeEffectivness">
    Add Type Effectivness
</MudButton>

<MudSpacer />

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           Class="ml-auto"
           OnClick="AddNextPokemon">
    Add All Pokemon
</MudButton>

<MudSpacer />

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           Class="ml-auto"
           OnClick="AddAllMoves">
    Add Moves
</MudButton>

<MudSpacer />

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           Class="ml-auto"
           OnClick="AddAllMethods">
    Add Methods
</MudButton>

@code {
    List<PokeMove> allMoves = new List<PokeMove>();
    List<PokeType> allTypes = new List<PokeType>();
    List<PokeMethod> allMethods = new List<PokeMethod>();
    protected override async Task OnInitializedAsync()
    {
        allMoves = await PokeServices.GetMoveList();
        allTypes = await PokeServices.GetTypeList();
        allMethods = await PokeServices.GetMethodList();
    }

    private async Task AddTypes()
    {
        List<PokeType> TypesBeingAdded = await PokeApi.AddTypeNames();
        await PokeServices.AddTypeAsync(TypesBeingAdded);
    }

    private async Task AddTypeEffectivness()
    {
        List<TypeEffectiveness> typeEffectivenesses = await PokeApi.GetEffectiveness(allTypes);
        foreach (var i in typeEffectivenesses)
        {
            await PokeServices.AddTypeEffectivness(i);
        }
    }

    public async Task AddNextPokemon()
    {
        for (int i = 1; i <= 1024; i++)
        {
            PokedexPokemon pokedexPokemon = new PokedexPokemon();
            pokedexPokemon = await PokeApi.GetPokemonForDatabase(i, allTypes);
            await PokeServices.AddPokemon(pokedexPokemon);
            await AddPokemonVersion(pokedexPokemon);
            await AddPokemonMoves(pokedexPokemon);
        }
    }

    public async Task AddAllMoves()
    {
        for (int i = 1; i <= 826; i++)
        {
            await PokeServices.AddMove(await PokeApi.GetMoveForDatabase(i, allTypes));
        }
    }

    public async Task AddAllMethods()
    {
        for (int i = 1; i <= 11; i++)
        {
            await PokeServices.AddMethod(await PokeApi.GetMethodsForDatabase(i));
        }
    }

    public async Task AddPokemonVersion(PokedexPokemon poke)
    {
        string LastVersion = await PokeApi.UpdatedPokemon(poke);
        poke.LastVersion = LastVersion;
        await PokeServices.UpdatePokemon(poke);
    }

    public async Task AddPokemonMoves(PokedexPokemon poke)
    {
        List<MovesLearnedByPokemon> movesLearned = await PokeApi.UpdatedMoves(poke, allMoves, allMethods);
        poke.Moves = movesLearned;
        await PokeServices.UpdatePokemon(poke);
    }
}
