@inject PokemonServices PokeService
@inject NavigationManager NavigationManager
@page "/Pokedex"

<MudPaper Class="p-4">
    <MudText Typo="Typo.h2" Class="ma-4">Pokedex</MudText>
    <MudDivider Class="ma-2" />
    <MudTextField @bind-Value="searchString1"
                  Placeholder="Search"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  IconSize="Size.Medium"
                  Class="mb-4 ml-4"
                  Style="max-width: 20%;" />

    <MudToggleIconButton @bind-Toggled="TypeOrName"
                         Size="Size.Large"
                         Icon="@Icons.Material.Filled.ToggleOff"
                         Color="@Color.Error"
                         ToggledIcon="@Icons.Material.Filled.ToggleOn"
                         ToggledColor="@Color.Success"
                         title="@(TypeOrName ? "Type" : "Name")" />
    <span class="ml-2">Searching for @(TypeOrName ? "Type" : "Name")</span>


    <MudDivider Class="my-4" />

    <MudGrid>
        @foreach (var pokemon in FilteredPokemon)
        {
            <MudItem xs="6" sm="4" md="3" lg="2">
                <MudCard>

                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.CatchingPokemon" Color="Color.Secondary" OnClick="@(()=> ClickPokemon(pokemon.PokemonName))" />
                    </MudCardActions>
                    <MudImage Src="@pokemon.Sprite"
                              Alt="@pokemon.PokemonName"
                              Fluid="true"/>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@pokemon.PokemonName.CapitalizeName()</MudText>
                        <MudText Typo="Typo.body2">Dex No: @pokemon.PokedexPokemonId</MudText>
                        <MudStack Direction="Row" Spacing="1">
                            <MudButton Variant="Variant.Filled" Size="Size.Small" Class="@pokemon.DefenceType1.PokeTypeName">
                                @pokemon.DefenceType1.PokeTypeName
                            </MudButton>
                            @if (pokemon.DefenceType2 != null)
                            {
                                <MudButton Variant="Variant.Filled" Size="Size.Small" Class="@pokemon.DefenceType2.PokeTypeName">
                                    @pokemon.DefenceType2.PokeTypeName
                                </MudButton>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <MudDivider Class="my-4" />

    <MudSelect @bind-Value="pageSize" Label="Page Size" Class="mb-4 ml-4" Style="max-width: 10%;">
        @foreach (var size in PageSizes)
        {
            <MudSelectItem Value="@size">@size</MudSelectItem>
        }
    </MudSelect>

    <MudPagination Color="Color.Primary" Count="@TotalPages" @bind-Selected="CurrentPage" Class="mb-4 ml-2" />

</MudPaper>

@code {

    List<PokedexPokemon> ListOfPokemon = new List<PokedexPokemon>();

    public bool TypeOrName { get; set; }
    private string searchString1 = "";

    private static readonly int[] PageSizes = { 12, 24, 36, 48 };
    private int pageSize { get; set; } = PageSizes[0];

    private int TotalPages => (int)Math.Ceiling(UnpaginatedFilteredPokemon.Count() / (double)pageSize);

    private int CurrentPage { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        ListOfPokemon = await PokeService.GetPokemonList();
        StateHasChanged();
    }

    //used to calulate pages
    private IEnumerable<PokedexPokemon> UnpaginatedFilteredPokemon =>
    ListOfPokemon
    .Where(pokemon => string.IsNullOrWhiteSpace(searchString1) ||
    (TypeOrName ? pokemon.DefenceType1.PokeTypeName.Contains(searchString1, StringComparison.OrdinalIgnoreCase) :
    pokemon.PokemonName.Contains(searchString1, StringComparison.OrdinalIgnoreCase)));

    private IEnumerable<PokedexPokemon> FilteredPokemon =>
    UnpaginatedFilteredPokemon
    .Skip((CurrentPage - 1) * pageSize)
    .Take(pageSize);

    private void OnPageChanged(int newPage)
    {
        CurrentPage = newPage;
        if (CurrentPage > TotalPages)
        {
            CurrentPage = TotalPages;
        }
    }

    private void ClickPokemon(string clickedPokemon)
    {
        NavigationManager.NavigateTo($"/{clickedPokemon}");
    }

}
