@inject PokemonServices PokeService

@page "/Pokedex"

<MudTable Items="@ListOfPokemon" Filter="new Func<PokedexPokemon,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Pokedex</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="TypeOrName"
                             Size="Size.Large"
                             Icon="@Icons.Material.Filled.ToggleOff"
                             Color="@Color.Error"
                             ToggledIcon="@Icons.Material.Filled.ToggleOn"
                             ToggledColor="@Color.Success"
                             title="@(TypeOrName ? "Type" : "Name")" />

        <span>Searching for @(TypeOrName ? "Type" : "Name")</span>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>National Dex No</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Types</MudTh>
        <MudTh>Sprite</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="National Dex No">@context.PokedexPokemonId</MudTd>
        <MudTd DataLabel="Name">@context.PokemonName</MudTd>
        <MudTd DataLabel="Types">
            <MudButton Variant="Variant.Filled"
                       Size="Size.Small"
                       Class="@context.DefenceType1.PokeTypeName">
                @context.DefenceType1.PokeTypeName
            </MudButton>
            @if (context.DefenceType2 != null)
            {
                <MudButton Variant="Variant.Filled"
                           Size="Size.Small"
                           Class="@context.DefenceType2.PokeTypeName">
                    @context.DefenceType2.PokeTypeName
                </MudButton>
            }
        </MudTd>
        <MudTd DataLabel="Sprite"><MudImage Src="@context.Sprite"></MudImage></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 20 }" />
    </PagerContent>
</MudTable>



@code {

    List<PokedexPokemon> ListOfPokemon = new List<PokedexPokemon>();
    public bool TypeOrName { get; set; }
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        ListOfPokemon = await PokeService.GetPokemonList();
        StateHasChanged();
    }

    private bool FilterFunc1(PokedexPokemon pokemon) => FilterFunc(pokemon, searchString1);

    private bool FilterFunc(PokedexPokemon pokemon, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (!TypeOrName)
        {
            return pokemon.PokemonName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        }
        else
        {
            if (pokemon.DefenceType1.PokeTypeName.Equals(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (pokemon.DefenceType2?.PokeTypeName?.Equals(searchString, StringComparison.OrdinalIgnoreCase) == true)
                return true;
        }
        return false;
    }
}
