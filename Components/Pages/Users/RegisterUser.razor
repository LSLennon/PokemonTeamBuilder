@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject UserService serviceUsers
@inject NavigationManager NavigationManager
@inject PokemonAuthenticationService PokeService
@page "/RegisterUser"

<MudForm @ref="form" 
    @bind-IsValid="@success">
    <MudTextField T="string"
                  Label="Username"
                  @bind-Value="RegisterUsername"
                  Required="true"
                  RequiredError="User name is required!"
                  Validation="@(new Func<string, Task<string>>(UsernameMatch))" />
    <MudTextField T="string"
                  Label="Password"
                  HelperText="Choose a strong password"
                  @bind-Value="RegisterPassword"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Password is required!" />
    <MudTextField T="string"
                  Label="Password"
                  HelperText="Repeat the password"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, string>(PasswordMatch))" />
    <div class="d-flex align-center justify-space-between">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="@(!success)"
                   Class="ml-auto"
                   OnClick="Register">
            Register
        </MudButton>
    </div>
</MudForm>

@code {

    bool success;
    MudForm form;
    private string RegisterUsername;
    private string RegisterPassword;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if(arg == null)
        {
            return "Please enter a password";
        }
        else
        {
            if (RegisterPassword != arg)
                return "Passwords don't match";
            return null;
        }

    }

    private async Task<string?> UsernameMatch(string arg)
    {
        bool isUsernameUnique = await serviceUsers.RepeatUsernameTest(arg);
        return isUsernameUnique ? null : "Username already exists";
    }


    private async Task Register()
    {
        await serviceUsers.RegisterUser(RegisterUsername, RegisterPassword);
        bool success = await serviceUsers.LoginUser(RegisterUsername, RegisterPassword);
        if (success)
        {
            await PokeService.SignInAsync(RegisterUsername);
            NavigationManager.NavigateTo($"/UserProfile");
        }
    }

}
