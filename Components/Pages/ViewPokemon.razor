@inject PokemonServices PokeService
@inject NavigationManager NavigationManager
@inject PokemonApiService PokeApi

@page "/{OnePokemon}/{LastVersion}"

@if (isReady)
{
    <h3>Base Pokemon Details</h3>

    <p>
        <strong>Name:</strong> @basePokemon.PokemonName
    </p>
    <p>
        <strong>Pokedex Entry:</strong> @basePokemon.PokedexEntry
    </p>
    <p>
        <strong>Sprite:</strong>
        <img src="@basePokemon.Sprites[0].Url" alt="Pokemon Sprite" />
    </p>
    <p>
        <strong>Type:</strong> @basePokemon.Types[0].PokeTypeName
    </p>
    <p>
        <strong>Height:</strong> @((basePokemon.Height / 10.0).ToString("0.0")) m <!-- I still wanted the decimal place to be displayed but Blazor doesnt like that -->
    </p>
    <p>
        <strong>Weight:</strong> @((basePokemon.Weight / 10.0).ToString("0.0")) kg <!-- I still wanted the decimal place to be displayed but Blazor doesnt like that -->
    </p>
    <p>
        <strong>Primary Ability:</strong> @basePokemon.Abilities[0].AbilityName - @basePokemon.Abilities[0].AbilityDescription
    </p>
    <p>
        <strong>Attack:</strong> @basePokemon.Stats[0].Attack
    </p>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Move Name</th>
                <th>Accuracy</th>
                <th>Type</th>
                <th>PP</th>
                <th>Power</th>
                <th>Damage Class</th>
                <th>Flavour Text</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var move in basePokemon.Moves)
            {
                <tr>
                    <td>@move.PokeMoveId</td>
                    <td>@move.MoveName</td>
                    <td>@(move.Accuracy.HasValue ? $"{move.Accuracy}%" : "N/A")</td>
                    <td>@move.MoveType.PokeTypeName</td>
                    <td>@(move.PP.HasValue ? move.PP : "N/A")</td>
                    <td>@(move.Power.HasValue ? move.Power : "N/A")</td>
                    <td>@move.DamgeClass</td>
                    <td>@move.FlavourText</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public string OnePokemon { get; set; }
    [Parameter]
    public string LastVersion { get; set; }

    PokedexPokemon pokedexPokemon = new PokedexPokemon();
    BasePokemon basePokemon = new BasePokemon();
    List<PokeType> allTypes = new List<PokeType>();

    bool isReady = false;

    protected override async Task OnInitializedAsync()
    {
        pokedexPokemon = await PokeService.GetPokemonByName(OnePokemon);
        allTypes = await PokeService.GetTypeList();
        basePokemon = await PokeApi.GetPokemon(OnePokemon, allTypes, LastVersion);
        basePokemon = await AddToBasePokemon(basePokemon, pokedexPokemon);
        isReady = true;
    }

    public async Task<BasePokemon> AddToBasePokemon(BasePokemon basePokemon, PokedexPokemon pokedexPokemon)
    {
        basePokemon.BasePokemonId = pokedexPokemon.PokedexPokemonId;
        basePokemon.PokemonName = pokedexPokemon.PokemonName;
        basePokemon.Types.Add(pokedexPokemon.DefenceType1);

        if (pokedexPokemon.DefenceType2 != null)
        {
            basePokemon.Types.Add(pokedexPokemon.DefenceType2);
        }
        foreach(var move in pokedexPokemon.Moves)
        {
            
        }
        return basePokemon;
    }
}
        