@inject PokemonServices PokeService
@inject NavigationManager NavigationManager
@inject PokemonApiService PokeApi

@page "/{OnePokemon}"

@if (isReady)
{
    <h3>Base Pokemon Details</h3>

    <p>
        <strong>Name:</strong> @basePokemon.PokemonName
    </p>
    <p>
        <strong>Pokedex Entry:</strong> @basePokemon.PokedexEntry
    </p>
    <p>
        <strong>Sprite:</strong>
        <img src="@basePokemon.Sprites[0].Url" alt="Pokemon Sprite" />
    </p>
    <p>
        <strong>Type:</strong> @basePokemon.Types[0].PokeTypeName
    </p>
    <p>
        <strong>Height:</strong> @((basePokemon.Height / 10.0).ToString("0.0")) m <!-- I still wanted the decimal place to be displayed but Blazor doesnt like that -->
    </p>
    <p>
        <strong>Weight:</strong> @((basePokemon.Weight / 10.0).ToString("0.0")) kg <!-- I still wanted the decimal place to be displayed but Blazor doesnt like that -->
    </p>
    <p>
        <strong>Primary Ability:</strong> @basePokemon.Abilities[0].AbilityName - @basePokemon.Abilities[0].AbilityDescription
    </p>
    <p>
        <strong>Attack:</strong> @basePokemon.Stats[0].Attack
    </p>

}


@code {
    [Parameter]
    public string OnePokemon { get; set; }

    BasePokemon basePokemon = new BasePokemon();
    List<PokeType> allTypes = new List<PokeType>();

    bool isReady = false;

    protected override async Task OnInitializedAsync()
    {
        allTypes = await PokeService.GetTypeList();
        basePokemon = await PokeApi.GetPokemon(OnePokemon, allTypes);
        isReady = true;
        StateHasChanged();
    }
}
