// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonTeamBuilder.Data;

#nullable disable

namespace PokemonTeamBuilder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.BasePokemon.MPokemonToAbilities", b =>
                {
                    b.Property<int>("MPokemonToAbilitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokeAbilityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MPokemonToAbilitiesId");

                    b.HasIndex("PokeAbilityId");

                    b.HasIndex("PokemonId");

                    b.ToTable("MPokemonToAbilities");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.BasePokemon.MPokemonToMoves", b =>
                {
                    b.Property<int>("MPokemonToMovesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokeMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokeMoveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MPokemonToMovesId");

                    b.HasIndex("PokeMethodId");

                    b.HasIndex("PokeMoveId");

                    b.HasIndex("PokemonId");

                    b.ToTable("MPokemonToMoves");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.BasePokemon.MPokemonToTypes", b =>
                {
                    b.Property<int>("MPokemonToTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokeTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MPokemonToTypesId");

                    b.HasIndex("PokeTypeId");

                    b.HasIndex("PokemonId");

                    b.ToTable("MPokemonToTypes");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.FavouriteUser.UserFavourites", b =>
                {
                    b.Property<int>("UserFavouritesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserFavouritesId");

                    b.HasIndex("PokemonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavourites");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.PokemonCustom.MCustomToMoves", b =>
                {
                    b.Property<int>("MCustomToMovesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomPokemonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MPokemonToMovesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MCustomToMovesId");

                    b.HasIndex("CustomPokemonId");

                    b.HasIndex("MPokemonToMovesId");

                    b.ToTable("MCustomToMoves");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.HeldItem", b =>
                {
                    b.Property<int>("HeldItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HeldItemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HeldItemId");

                    b.ToTable("HeldItems");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeAbility", b =>
                {
                    b.Property<int>("PokeAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AbilityDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PokeAbilityId");

                    b.ToTable("PokeAbilities");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeMethod", b =>
                {
                    b.Property<int>("PokeMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PokeMethodId");

                    b.ToTable("PokeMethods");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeMove", b =>
                {
                    b.Property<int>("PokeMoveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Accuracy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DamgeClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FlavourText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MoveTypePokeTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Power")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokeMoveId");

                    b.HasIndex("MoveTypePokeTypeId");

                    b.ToTable("PokeMoves");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeNature", b =>
                {
                    b.Property<int>("PokeNatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Attack")
                        .HasColumnType("REAL");

                    b.Property<double>("Defence")
                        .HasColumnType("REAL");

                    b.Property<string>("NatureName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("SpAttack")
                        .HasColumnType("REAL");

                    b.Property<double>("SpDefence")
                        .HasColumnType("REAL");

                    b.Property<double>("Speed")
                        .HasColumnType("REAL");

                    b.HasKey("PokeNatureId");

                    b.ToTable("PokeNatures");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeStats", b =>
                {
                    b.Property<int>("PokeStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpAttack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpDefence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokeStatsId");

                    b.ToTable("PokeStats");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeType", b =>
                {
                    b.Property<int>("PokeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PokeTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PokeTypeId");

                    b.ToTable("PokeTypes");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", b =>
                {
                    b.Property<int>("PokemonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseStatsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PokedexEntry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PokemonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("PokemonId");

                    b.HasIndex("BaseStatsId")
                        .IsUnique();

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.TypeEffectiveness", b =>
                {
                    b.Property<int>("TypeEffectivnessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DamageCalculation")
                        .HasColumnType("REAL");

                    b.Property<int>("DefenceTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TypeEffectivnessId");

                    b.HasIndex("AttackTypeId");

                    b.HasIndex("DefenceTypeId");

                    b.ToTable("TypeEffectivenesses");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.CustomPokemon", b =>
                {
                    b.Property<int>("CustomPokemonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomPokemonAbilityPokeAbilityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomPokemonEVsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomPokemonHeldItemHeldItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomPokemonIVsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomPokemonLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomPokemonNaturePokeNatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomPokemonNickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PokemonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomPokemonId");

                    b.HasIndex("CustomPokemonAbilityPokeAbilityId");

                    b.HasIndex("CustomPokemonEVsId")
                        .IsUnique();

                    b.HasIndex("CustomPokemonHeldItemHeldItemId");

                    b.HasIndex("CustomPokemonIVsId")
                        .IsUnique();

                    b.HasIndex("CustomPokemonNaturePokeNatureId");

                    b.HasIndex("PokemonId");

                    b.HasIndex("UserTeamId");

                    b.ToTable("CustomPokemons");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.UserTeam", b =>
                {
                    b.Property<int>("UserTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserTeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.BasePokemon.MPokemonToAbilities", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeAbility", "PokeAbility")
                        .WithMany("Abilities")
                        .HasForeignKey("PokeAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", "Pokemon")
                        .WithMany("Abilities")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokeAbility");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.BasePokemon.MPokemonToMoves", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeMethod", "PokeMethod")
                        .WithMany("Abilities")
                        .HasForeignKey("PokeMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeMove", "PokeMove")
                        .WithMany("Moves")
                        .HasForeignKey("PokeMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", "Pokemon")
                        .WithMany("Moves")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokeMethod");

                    b.Navigation("PokeMove");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.BasePokemon.MPokemonToTypes", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeType", "PokeType")
                        .WithMany("PokemonTypes")
                        .HasForeignKey("PokeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", "Pokemon")
                        .WithMany("PokemonTypes")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokeType");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.FavouriteUser.UserFavourites", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.UsersData.User", "User")
                        .WithMany("UserFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.ManyToMany.PokemonCustom.MCustomToMoves", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.UsersData.CustomPokemon", "CustomPokemon")
                        .WithMany("CustomPokemonMoves")
                        .HasForeignKey("CustomPokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.ManyToMany.BasePokemon.MPokemonToMoves", "MPokemonToMoves")
                        .WithMany()
                        .HasForeignKey("MPokemonToMovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomPokemon");

                    b.Navigation("MPokemonToMoves");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeMove", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeType", "MoveType")
                        .WithMany()
                        .HasForeignKey("MoveTypePokeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoveType");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeStats", "BaseStats")
                        .WithOne()
                        .HasForeignKey("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", "BaseStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseStats");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.TypeEffectiveness", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeType", "AttackType")
                        .WithMany("AttackEffectiveness")
                        .HasForeignKey("AttackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeType", "DefenceType")
                        .WithMany("DefenceEffectiveness")
                        .HasForeignKey("DefenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttackType");

                    b.Navigation("DefenceType");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.CustomPokemon", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeAbility", "CustomPokemonAbility")
                        .WithMany()
                        .HasForeignKey("CustomPokemonAbilityPokeAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeStats", "CustomPokemonEVs")
                        .WithOne()
                        .HasForeignKey("PokemonTeamBuilder.Components.Classes.UsersData.CustomPokemon", "CustomPokemonEVsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.HeldItem", "CustomPokemonHeldItem")
                        .WithMany()
                        .HasForeignKey("CustomPokemonHeldItemHeldItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeStats", "CustomPokemonIVs")
                        .WithOne()
                        .HasForeignKey("PokemonTeamBuilder.Components.Classes.UsersData.CustomPokemon", "CustomPokemonIVsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.PokeNature", "CustomPokemonNature")
                        .WithMany()
                        .HasForeignKey("CustomPokemonNaturePokeNatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonTeamBuilder.Components.Classes.UsersData.UserTeam", "UserTeam")
                        .WithMany("CustomPokemons")
                        .HasForeignKey("UserTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomPokemonAbility");

                    b.Navigation("CustomPokemonEVs");

                    b.Navigation("CustomPokemonHeldItem");

                    b.Navigation("CustomPokemonIVs");

                    b.Navigation("CustomPokemonNature");

                    b.Navigation("Pokemon");

                    b.Navigation("UserTeam");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.UserTeam", b =>
                {
                    b.HasOne("PokemonTeamBuilder.Components.Classes.UsersData.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeAbility", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeMethod", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeMove", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.PokeType", b =>
                {
                    b.Navigation("AttackEffectiveness");

                    b.Navigation("DefenceEffectiveness");

                    b.Navigation("PokemonTypes");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.PokemonData.Pokemon", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Moves");

                    b.Navigation("PokemonTypes");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.CustomPokemon", b =>
                {
                    b.Navigation("CustomPokemonMoves");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.User", b =>
                {
                    b.Navigation("UserFavourites");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("PokemonTeamBuilder.Components.Classes.UsersData.UserTeam", b =>
                {
                    b.Navigation("CustomPokemons");
                });
#pragma warning restore 612, 618
        }
    }
}
